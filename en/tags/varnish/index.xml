<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Drupal WxT â€“ varnish</title><link>https://drupalwxt.github.io/en/tags/varnish/</link><description>Recent content in varnish on Drupal WxT</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://drupalwxt.github.io/en/tags/varnish/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Varnish</title><link>https://drupalwxt.github.io/en/docs/development/performance/varnish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://drupalwxt.github.io/en/docs/development/performance/varnish/</guid><description>
&lt;p>To properly configure Varnish with Drupal you should ensure the following configuration is your &lt;code>default.vcl&lt;/code> file.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Some customizations might be necessary depending on your individual requirements.&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-vcl" data-lang="vcl">vcl 4.0;
import std;
import directors;
backend nginx {
.host = &amp;quot;hostname-nginx&amp;quot;;
.host_header = &amp;quot;hostname-nginx&amp;quot;;
.port = &amp;quot;80&amp;quot;;
}
sub vcl_init {
new backends = directors.round_robin();
backends.add_backend(nginx);
}
sub vcl_recv {
set req.http.X-Forwarded-Host = req.http.Host;
if (!req.http.X-Forwarded-Proto) {
set req.http.X-Forwarded-Proto = &amp;quot;http&amp;quot;;
}
# Answer healthcheck
if (req.url == &amp;quot;/_healthcheck&amp;quot; || req.url == &amp;quot;/healthcheck.txt&amp;quot;) {
return (synth(700, &amp;quot;HEALTHCHECK&amp;quot;));
}
set req.backend_hint = backends.backend();
# Answer healthcheck
if (req.url == &amp;quot;/_healthcheck&amp;quot; || req.url == &amp;quot;/healthcheck.txt&amp;quot;) {
return (synth(700, &amp;quot;HEALTHCHECK&amp;quot;));
}
set req.backend_hint = backends.backend();
# Always cache certain file types
# Remove cookies that Drupal doesn't care about
if (req.url ~ &amp;quot;(?i)\.(asc|dat|tgz|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$&amp;quot;) {
unset req.http.Cookie;
} else if (req.http.Cookie) {
set req.http.Cookie = &amp;quot;;&amp;quot; + req.http.Cookie;
set req.http.Cookie = regsuball(req.http.Cookie, &amp;quot;; +&amp;quot;, &amp;quot;;&amp;quot;);
set req.http.Cookie = regsuball(req.http.Cookie, &amp;quot;;(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=&amp;quot;, &amp;quot;; \1=&amp;quot;);
set req.http.Cookie = regsuball(req.http.Cookie, &amp;quot;;[^ ][^;]*&amp;quot;, &amp;quot;&amp;quot;);
set req.http.Cookie = regsuball(req.http.Cookie, &amp;quot;^[; ]+|[; ]+$&amp;quot;, &amp;quot;&amp;quot;);
if (req.http.Cookie == &amp;quot;&amp;quot;) {
unset req.http.Cookie;
} else {
return (pass);
}
}
# If POST, PUT or DELETE, then don't cache
if (req.method == &amp;quot;POST&amp;quot; || req.method == &amp;quot;PUT&amp;quot; || req.method == &amp;quot;DELETE&amp;quot;) {
return (pass);
}
# Happens before we check if we have this in cache already.
#
# Typically you clean up the request here, removing cookies you don't need,
# rewriting the request, etc.
return (hash);
#return (pass);
}
sub vcl_backend_fetch {
# NEW
set bereq.http.Host = &amp;quot;hostname-nginx&amp;quot;;
# Don't add 127.0.0.1 to X-Forwarded-For
set bereq.http.X-Forwarded-For = regsub(bereq.http.X-Forwarded-For, &amp;quot;(, )?127\.0\.0\.1$&amp;quot;, &amp;quot;&amp;quot;);
}
sub vcl_backend_response {
if (beresp.http.Location) {
set beresp.http.Location = regsub(
beresp.http.Location,
&amp;quot;^https?://[^/]+/&amp;quot;,
bereq.http.X-Forwarded-Proto + &amp;quot;://&amp;quot; + bereq.http.X-Forwarded-Host + &amp;quot;/&amp;quot;
);
}
# Only cache select response codes
if (beresp.status == 200 || beresp.status == 203 || beresp.status == 204 || beresp.status == 206 || beresp.status == 300 || beresp.status == 301 || beresp.status == 404 || beresp.status == 405 || beresp.status == 410 || beresp.status == 414 || beresp.status == 501) {
# Cache for 5 minutes
set beresp.ttl = 5m;
set beresp.grace = 12h;
set beresp.keep = 24h;
} else {
set beresp.ttl = 0s;
}
}
sub vcl_deliver {
# Remove identifying information
unset resp.http.Server;
unset resp.http.X-Powered-By;
unset resp.http.X-Varnish;
unset resp.http.Via;
# Comment these for easier Drupal cache tag debugging in development.
unset resp.http.Cache-Tags;
unset resp.http.X-Drupal-Cache-Contexts;
# Add Content-Security-Policy
# set resp.http.Content-Security-Policy = &amp;quot;default-src 'self' *.example.ca *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net data:; font-src 'self' *.example.ca https://fonts.gstatic.com&amp;quot;;
# Add CORS Headers
# if (req.http.Origin ~ &amp;quot;(?i)\.example\.ca$&amp;quot;) {
# if (req.url ~ &amp;quot;\.(ttd|woff|woff2)(\?.*)?$&amp;quot;) {
# set resp.http.Access-Control-Allow-Origin = &amp;quot;*&amp;quot;;
# set resp.http.Access-Control-Allow-Methods = &amp;quot;GET&amp;quot;;
# }
# }
# Add X-Frame-Options
if (req.url ~ &amp;quot;^/livechat&amp;quot; || req.url ~ &amp;quot;^/(en/|fr/)?entity-browser/&amp;quot;) {
set resp.http.X-Frame-Options = &amp;quot;SAMEORIGIN&amp;quot;;
} else {
set resp.http.X-Frame-Options = &amp;quot;DENY&amp;quot;;
}
set resp.http.X-Content-Type-Options = &amp;quot;nosniff&amp;quot;;
set resp.http.X-XSS-Protection = &amp;quot;1; mode=block&amp;quot;;
# Happens when we have all the pieces we need, and are about to send the
# response to the client.
#
# You can do accounting or modifying the final object here.
if (obj.hits &amp;gt; 0) {
set resp.http.X-Cache = &amp;quot;HIT&amp;quot;;
} else {
set resp.http.X-Cache = &amp;quot;MISS&amp;quot;;
}
# Handle errors
if ( (resp.status &amp;gt;= 500 &amp;amp;&amp;amp; resp.status &amp;lt;= 599)
|| resp.status == 400
|| resp.status == 401
|| resp.status == 403
|| resp.status == 404) {
return (synth(resp.status));
}
}
sub vcl_synth {
# Remove identifying information
unset resp.http.Server;
unset resp.http.X-Powered-By;
unset resp.http.X-Varnish;
unset resp.http.Via;
# Add Content-Security-Policy
# set resp.http.Content-Security-Policy = &amp;quot;default-src 'self' *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca data:;&amp;quot;;
# set resp.http.X-Content-Type-Options = &amp;quot;nosniff&amp;quot;;
# set resp.http.X-Frame-Options = &amp;quot;DENY&amp;quot;;
# set resp.http.X-XSS-Protection = &amp;quot;1; mode=block&amp;quot;;
# if (resp.status &amp;gt;= 500 &amp;amp;&amp;amp; resp.status &amp;lt;= 599) {
# set resp.http.Content-Type = &amp;quot;text/html; charset=utf-8&amp;quot;;
# synthetic(std.fileread(&amp;quot;/data/configuration/varnish/errors/503.html&amp;quot;));
# return (deliver);
# } elseif (resp.status == 400) { # 400 - Bad Request
# set resp.http.Content-Type = &amp;quot;text/html; charset=utf-8&amp;quot;;
# synthetic(std.fileread(&amp;quot;/data/configuration/varnish/errors/400.html&amp;quot;));
# return (deliver);
# } elseif (resp.status == 401) { # 401 - Unauthorized
# set resp.http.Content-Type = &amp;quot;text/html; charset=utf-8&amp;quot;;
# synthetic(std.fileread(&amp;quot;/data/configuration/varnish/errors/401.html&amp;quot;));
# return (deliver);
# } elseif (resp.status == 403) { # 403 - Forbidden
# set resp.http.Content-Type = &amp;quot;text/html; charset=utf-8&amp;quot;;
# synthetic(std.fileread(&amp;quot;/data/configuration/varnish/errors/403.html&amp;quot;));
# return (deliver);
# } elseif (resp.status == 404) { # 404 - Not Found
# set resp.http.Content-Type = &amp;quot;text/html; charset=utf-8&amp;quot;;
# synthetic(std.fileread(&amp;quot;/data/configuration/varnish/errors/404.html&amp;quot;));
# return (deliver);
# } else
if (resp.status == 700) { # Respond to healthcheck
set resp.status = 200;
set resp.http.Content-Type = &amp;quot;text/plain&amp;quot;;
synthetic ( {&amp;quot;OK&amp;quot;} );
return (deliver);
}
}
##
# ERROR HANDLING
##
# sub vcl_backend_error {
# set beresp.http.Content-Type = &amp;quot;text/html; charset=utf-8&amp;quot;;
# synthetic(std.fileread(&amp;quot;/data/configuration/varnish/errors/503.html&amp;quot;));
# return (deliver);
# }
&lt;/code>&lt;/pre></description></item></channel></rss>